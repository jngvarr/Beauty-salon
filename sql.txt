set search_path = salon;

create schema IF NOT EXISTS salon;

create table if not exists salon.services
(
    id          bigint generated always as identity primary key,
    title       text    not null,
    price       numeric not null,
    duration    integer not null,
    description text    not null
);
-- drop table consumables;
create table if not exists consumables
(
    id    bigint generated always as identity primary key,
    title text NOT NULL,
    unit  text DEFAULT 'PIECE',
    price DECIMAL
);

create table service_to_consumables
(
    id            bigint generated always as identity,
    consumable_id bigint not null
        constraint service_to_consumables_fk1
            references consumables (id),
    service_id    bigint not null
        constraint service_to_consumables_fk2
            references services (id)
);

create table if not exists salon.clients
(
    id         bigint generated always as identity primary key,
    first_name TEXT NOT NULL,
    last_name  TEXT,
    contact    TEXT NOT NULL,
    dob        DATE
);

create table if not exists visits
(
    id         bigint generated always as identity primary key,
    date       DATE   NOT NULL,
    start_time TIME   NOT NULL,
    service_id bigint not null,
    client_id  bigint not null,
    master_id  bigint not null
);

create table if not exists employees
(
    id         bigint generated always as identity primary key,
    first_name TEXT NOT NULL,
    last_name  TEXT NOT NULL,
    contact    TEXT NOT NULL,
    dob        DATE NOT NULL,
    function   TEXT NOT NULL
);

insert into service_to_consumables (service_id, consumable_id)
select s.id, c.id
from services s,
     consumables c
where s.title = 'Простое окрашивание'
  and c.title in ('Краска',
                  'Полотенце'
    );

create table if not exists users
(
    id         bigint generated always as identity primary key,
    first_name TEXT,
    last_name  TEXT,
    contact    TEXT NOT NULL,
    dob        DATE,
    user_name  TEXT NOT NULL,
    email      TEXT NOT NULL,
    password   TEXT NOT NULL
);

select *
from users;

create table if not exists tokens
(
    id         bigint generated always as identity primary key,
    token      TEXT NOT NULL,
    valid_thru TIMESTAMP NOT NULL
);


create table if not exists authorities
(
    id         bigint generated always as identity primary key,
    name      TEXT NOT NULL
);

create table service_to_consumables
(
    id            bigint generated always as identity,
    consumable_id bigint not null
        constraint service_to_consumables_fk1
            references consumables (id),
    service_id    bigint not null
        constraint service_to_consumables_fk2
            references services (id)
);








drop table tokens;
drop table authorities;

-- последние версии
--
-- create table if not exists user_to_authorities
-- (
--     id       bigint generated always as identity primary key,
--     authority_id bigint not null
--         constraint user_to_authorities_fk1
--             references authorities(id) on delete cascade,
--     user_id  bigint not null
--         constraint user_to_authorities_fk2
--             references users(id) on delete cascade
-- );
--
-- create table if not exists users
-- (
--     id         bigint generated always as identity primary key,
--     first_name TEXT,
--     last_name  TEXT,
--     contact    TEXT NOT NULL,
--     dob        DATE,
--     user_name  TEXT NOT NULL,
--     email      TEXT NOT NULL,
--     password   TEXT NOT NULL
-- );
--
-- create table if not exists tokens
-- (
--     id         bigint generated always as identity primary key,
--     token      TEXT NOT NULL,
--     valid_thru TIMESTAMP NOT NULL
-- );
